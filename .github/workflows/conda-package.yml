name: Conda package

on:
    push:
      branches:
        - master
    pull_request:

permissions: read-all

env:
  PACKAGE_NAME: mkl_umath
  VER_SCRIPT1: "import json; f = open('ver.json', 'r'); j = json.load(f); f.close(); d = j['mkl_umath'][0];"
  VER_SCRIPT2: "print('='.join((d[s] for s in ('version', 'build'))))"

jobs:
  build_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set pkgs_dirs
        run: |
          echo "pkgs_dirs: [~/.conda/pkgs]" >> ~/.condarc

      - name: Cache conda packages
        uses: actions/cache@v4
        env:
          CACHE_NUMBER: 0  # Increase to reset cache
        with:
          path: ~/.conda/pkgs
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-${{hashFiles('**/meta.yaml') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-

      - name: Add conda to system path
        run: echo $CONDA/bin >> $GITHUB_PATH

      - name: Install conda-build
        run: conda install conda-build

      - name: Build conda package
        run: |
          CHANNELS="-c conda-forge -c https://software.repos.intel.com/python/conda --override-channels"
          VERSIONS="--python ${{ matrix.python }}"
          TEST="--no-test"
          echo "CONDA_BLD=${CONDA}/conda-bld/linux-64" >> $GITHUB_ENV

          conda build \
            $TEST \
            $VERSIONS \
            $CHANNELS \
            conda-recipe

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}
          path: ${{ env.CONDA_BLD }}/${{ env.PACKAGE_NAME }}-*.conda

  test_linux:
    needs: build_linux
    runs-on:  ${{ matrix.runner }}

    strategy:
      matrix:
        python: ["3.9", "3.10", "3.11", "3.12"]
        experimental: [false]
        runner: [ubuntu-latest]
    continue-on-error: ${{ matrix.experimental }}
    env:
      CHANNELS: -c conda-forge -c https://software.repos.intel.com/python/conda --override-channels

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}
      - name: Add conda to system path
        run: echo $CONDA/bin >> $GITHUB_PATH
      - name: Install conda-build
        run: conda install conda-build
      - name: Create conda channel
        run: |
          mkdir -p $GITHUB_WORKSPACE/channel/linux-64
          mv ${PACKAGE_NAME}-*.conda $GITHUB_WORKSPACE/channel/linux-64
          conda index $GITHUB_WORKSPACE/channel
          # Test channel
          conda search $PACKAGE_NAME -c $GITHUB_WORKSPACE/channel --override-channels

      - name: Collect dependencies
        run: |
          CHANNELS="-c $GITHUB_WORKSPACE/channel ${{ env.CHANNELS }}"
          conda create -n test_mkl_umath $PACKAGE_NAME python=${{ matrix.python }} $CHANNELS --only-deps --dry-run > lockfile
      - name: Display lockfile
        run: cat lockfile

      - name: Set pkgs_dirs
        run: |
          echo "pkgs_dirs: [~/.conda/pkgs]" >> ~/.condarc

      - name: Cache conda packages
        uses: actions/cache@v4
        env:
          CACHE_NUMBER: 0  # Increase to reset cache
        with:
          path: ~/.conda/pkgs
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-${{hashFiles('lockfile') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-

      - name: Install mkl_umath
        run: |
          CHANNELS="-c $GITHUB_WORKSPACE/channel ${{ env.CHANNELS }}"
          conda create -n test_mkl_umath python=${{ matrix.python }} $PACKAGE_NAME pytest $CHANNELS
          # Test installed packages
          conda list -n test_mkl_umath

      - name: Smoke test
        run: |
          source $CONDA/etc/profile.d/conda.sh
          conda activate test_mkl_umath
          python -c "import mkl_umath, numpy as np; mkl_umath.use_in_numpy(); np.sin(np.linspace(0, 1, num=10**6));"

      - name: Run tests
        run: |
          source $CONDA/etc/profile.d/conda.sh
          conda activate test_mkl_umath
          pytest -v --pyargs ${{ env.PACKAGE_NAME }}

  build_windows:
    runs-on: windows-2019

    strategy:
      matrix:
        python: ["3.9", "3.10", "3.11", "3.12"]
    env:
      conda-bld: C:\Miniconda\conda-bld\win-64\
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-variant: Miniforge3
          miniforge-version: latest
          activate-environment: build
          channels: conda-forge
          conda-remove-defaults: "true"
          python-version: ${{ matrix.python }}

      - name: Cache conda packages
        uses: actions/cache@v4
        env:
          CACHE_NUMBER: 3  # Increase to reset cache
        with:
          path: /home/runner/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-${{hashFiles('**/meta.yaml') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-

      - name: Store conda paths as envs
        shell: bash -l {0}
        run: |
          echo "CONDA_BLD=$CONDA/conda-bld/win-64/" | tr "\\\\" '/' >> $GITHUB_ENV

      - name: Install conda build
        run: |
          conda activate
          conda install -y conda-build
          conda list -n base

      - name: Build conda package
        run: |
          conda activate
          conda build --no-test --python ${{ matrix.python }} -c conda-forge -c https://software.repos.intel.com/python/conda --override-channels conda-recipe

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}
          path: ${{ env.CONDA_BLD }}${{ env.PACKAGE_NAME }}-*.conda

  test_windows:
    needs: build_windows
    runs-on:  ${{ matrix.runner }}
    defaults:
      run:
        shell: cmd /C CALL {0}
    strategy:
      matrix:
        python: ["3.9", "3.10", "3.11", "3.12"]
        experimental: [false]
        runner: [windows-2019]
    continue-on-error: ${{ matrix.experimental }}
    env:
      workdir: '${{ github.workspace }}'
      CHANNELS: -c conda-forge -c https://software.repos.intel.com/python/conda --override-channels

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-variant: Miniforge3
          miniforge-version: latest
          activate-environment: mkl_umath_test
          channels: conda-forge
          conda-remove-defaults: "true"
          python-version: ${{ matrix.python }}

      - name: Install conda-index
        run: |
          conda install -n base conda-index

      - name: Create conda channel with the artifact bit
        shell: cmd /C CALL {0}
        run: |
          echo ${{ env.workdir }}
          mkdir ${{ env.workdir }}\channel
          mkdir ${{ env.workdir }}\channel\win-64
          move ${{ env.PACKAGE_NAME }}-*.conda ${{ env.workdir }}\channel\win-64
          dir ${{ env.workdir }}\channel\win-64

      - name: Index the channel
        shell: cmd /C CALL {0}
        run: |
          conda index ${{ env.workdir }}\channel

      - name: Dump mkl_umath version info from created channel to STDOUT
        shell: cmd /C CALL {0}
        run: |
          conda search ${{ env.PACKAGE_NAME }} -c ${{ env.workdir }}/channel --override-channels --info --json

      - name: Dump mkl_umath version info from created channel into ver.json
        shell: cmd /C CALL {0}
        run: |
          conda search ${{ env.PACKAGE_NAME }} -c ${{ env.workdir }}/channel --override-channels --info --json > ${{ env.workdir }}\ver.json

      - name: Output content of workdir
        shell: pwsh
        run: Get-ChildItem -Path ${{ env.workdir }}

      - name: Output content of produced ver.json
        shell: pwsh
        run: Get-Content -Path ${{ env.workdir }}\ver.json

      - name: Collect dependencies
        shell: cmd /C CALL {0}
        run: |
          @ECHO ON
          IF NOT EXIST ver.json (
              copy /Y ${{ env.workdir }}\ver.json .
          )
          SET "SCRIPT=%VER_SCRIPT1% %VER_SCRIPT2%"
          FOR /F "tokens=* USEBACKQ" %%F IN (`python -c "%SCRIPT%"`) DO (
             SET PACKAGE_VERSION=%%F
          )
          conda install -n mkl_umath_test ${{ env.PACKAGE_NAME }}=%PACKAGE_VERSION% python=${{ matrix.python }} -c ${{ env.workdir }}/channel ${{ env.CHANNELS }} --only-deps --dry-run > lockfile

      - name: Display lockfile content
        shell: pwsh
        run: Get-Content -Path .\lockfile

      - name: Cache conda packages
        uses: actions/cache@v4
        env:
          CACHE_NUMBER: 0  # Increase to reset cache
        with:
          path: /home/runner/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-${{hashFiles('lockfile') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-

        # add intel-openmp as an explicit dependency
        # to avoid it being missed when package version is specified exactly
      - name: Install mkl_umath
        shell: cmd /C CALL {0}
        run: |
          @ECHO ON
          IF NOT EXIST ver.json (
              copy /Y ${{ env.workdir }}\ver.json .
          )
          set "SCRIPT=%VER_SCRIPT1% %VER_SCRIPT2%"
          FOR /F "tokens=* USEBACKQ" %%F IN (`python -c "%SCRIPT%"`) DO (
             SET PACKAGE_VERSION=%%F
          )
          SET "TEST_DEPENDENCIES=pytest pytest-cov"
          SET "WORKAROUND_DEPENDENCIES=intel-openmp"
          SET "DEPENDENCIES=%TEST_DEPENDENCIES% %WORKAROUND_DEPENDENCIES%"
          conda install -n mkl_umath_test ${{ env.PACKAGE_NAME }}=%PACKAGE_VERSION% %DEPENDENCIES% python=${{ matrix.python }} -c ${{ env.workdir }}/channel ${{ env.CHANNELS }}

      - name: Report content of test environment
        shell: cmd /C CALL {0}
        run: |
          conda activate
          echo "Value of CONDA enviroment variable was: " %CONDA%
          echo "Value of CONDA_PREFIX enviroment variable was: " %CONDA_PREFIX%
          conda info && conda list -n mkl_umath_test

      - name: Smoke test
        shell: cmd /C CALL {0}
        run: >-
          conda activate mkl_umath_test && python -c "import mkl_umath, numpy as np; mkl_umath.use_in_numpy(); np.sin(np.linspace(0, 1, num=10**6));"

      - name: Run tests
        shell: cmd /C CALL {0}
        run: |
          conda activate mkl_umath_test && python -m pytest -v -s --pyargs ${{ env.PACKAGE_NAME }}
